#!/bin/bash
#$ -pe smp 8
#$ -N base
#$ -M jhaase1@nd.edu
#$ -m ae
#$ -r y
#$ -q long   ###*@@dgo

# Initialize variables
restart=true

if [ -f TotalRelNorm.csv ] && [ "$restart" == "true" ]; then
	printf -v cCycles %.0f "$( cat TotalRelNorm.csv | cut -d, -f1 )";
else
	cCycles=0;
fi

transientCycles=5
echo "${transientCycles}" > transientCycles.csv

limit="5E-5"
echo "${limit}" > limit.csv

limit=`echo ${limit} | sed -e 's/[eE]+*/\*10\^/'`

norm2=1000
echo "${norm2}" > sum.csv

cmd="mpirun -np 8 ~/zapdos/zapdos-opt -i"
SmallOutput="Outputs/out/execute_on='final'"
options=""
####options="gap=2E-6 Materials/gas_block/user_work_function=4.00"
post=""

# Specific instructions if running as submitted job
if [[ ! -z "$SGE_STDOUT_PATH" ]]
then
	module purge
	module load opt_local ompi/2.0.1-gcc-6.2.0 paraview/5.3.0
	
	fsync -d 120 `pwd`/CurrentCycle.log &
	post="--color off > CurrentCycle.log"

#	killall -u jhaase1 -w -s SIGKILL zapdos-opt
fi

# Loop until converged
while [ `echo $norm2'<'$limit | bc -l` -eq 0 ]; do
	#Run initial cycle
	dos2unix transientCycles.csv
	dCycles=`cat transientCycles.csv | sed -e 's/[eE]+*/\*10\^/'`
	
	if [ ${cCycles} -eq 0 ]
	then
		eval "${cmd} Initial.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}" || { exit 56 ; }
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls Initial* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/Initial/PreviousCycle/g')
		done
	else
		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g')
		done
		
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${SmallOutput} ${options} ${post}" || { exit 56 ; }
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g')
		done
	fi

	#Run first steady state cycle
		dCycles=1
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}" || { exit 56 ; }
		cCycles=$((cCycles+dCycles))

		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do 
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g') ;
		done
		
	#Run second steady state cycle
		dCycles=1
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}" || { exit 56 ; }
		cCycles=$((cCycles+dCycles))

	# Check error
		pvpython GetR2Error.py
		dos2unix sum.csv
		norm2=`cat sum.csv | sed -e 's/[eE]+*/\*10\^/'`
		
		dos2unix limit.csv
		limit=`cat limit.csv | sed -e 's/[eE]+*/\*10\^/'`
done

# Create summary until not getting inf from emission increase...
re='^[0-9]+([.][0-9]+)?$'
emissionIncrease="start"
while ! [[ $emissionIncrease =~ $re ]] ; do
	pvpython MotiveCycleAnalysis.py
	dos2unix emission_increase.csv
	emissionIncrease=`cat emission_increase.csv`
	
	if ! [[ $emissionIncrease =~ $re ]] ; then
		ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
		
		mv CurrentCycle.log PreviousCycle.log
		
		for f in `ls SteadyState* -d | grep -v '\.i'` ; do 
			mv $f $(echo "$f" | sed 's/SteadyState/PreviousCycle/g') ;
		done
		
		dCycles=1
		eval "${cmd} SteadyState.i completedCycles=${cCycles} desiredCycles=${dCycles} ${options} ${post}" || { exit 56 ; }
		cCycles=$((cCycles+dCycles))
		pvpython GetR2Error.py
	fi
done

# Create results folder if it does not exist
if [ ! -d ../results ]; then
	mkdir -p ../results ;
fi

# What directory is this?
cwd=$(basename `pwd`)

# Move summarized data to results folder
cp PowerAndEfficiency.csv "../results/${cwd}.csv"

# Remove extraneous files
rm sum.csv
ls PreviousCycle* -d | grep -v '\.i' | xargs rm -rf
